"""
Module to process Faros 180 data
"""
from itertools import chain
from posixpath import join
import random

import numpy as np
import pandas as pd
import pyedflib as edf


class FarosReader:
    """
    Parses, timeshifts and writes data
    generated by Bittium Faros devices.

    Attributes
    ----------
    data : DataFrame
        DataFrame with the values that were read from the .edf or .csv file.
    """

    def __init__(self, path):
        """
        Reads an .edf file generated by the device or a .csv file generated by this reader.

        Parameters
        ----------
        path : str
            Path of the .edf or .csv file.
        """
        reader = edf.EdfReader(path)
        self.file_header = reader.getHeader()
        self.signal_headers = reader.getSignalHeaders()
        self.sample_freqs = {header['label']: header['sample_rate'] 
                             for header in self.signal_headers}
        self.start_time = pd.Timestamp(reader.getHeader()['startdate'])

        self._n_samples = reader.getNSamples()
        self._n_datarecords = reader.datarecords_in_file

        self.ECG = pd.Series(
            reader.readSignal(0),
            name='ECG', 
            index=pd.date_range(start=self.start_time,
                                periods=self._n_samples[0],
                                freq=f"{1/self.sample_freqs['ECG']}S")
        )
        self.ACC = pd.DataFrame({'X': reader.readSignal(1),
                                 'Y': reader.readSignal(2),
                                 'Z': reader.readSignal(3)},
                                 index=pd.date_range(start=self.start_time,
                                                     periods=self._n_samples[1],
                                                     freq=f"{1/self.sample_freqs['Accelerometer_X']}S")
        )
        self.ACC['mag'] = np.linalg.norm(self.ACC, axis=1)
        self.Marker = pd.Series(
            reader.readSignal(4),
            name='Marker',
            index=pd.date_range(start=self.start_time,
                                periods=self._n_samples[4],
                                freq=f"{1/self.sample_freqs['Accelerometer_X']}S")
        )
        self.HRV = pd.Series(
            reader.readSignal(5),
            name='HRV',
            index=pd.date_range(start=self.start_time,
                                periods=self._n_samples[5],
                                freq=f"{1/self.sample_freqs['HRV']}S")
        )

        reader.close()

        self.data = self._get_joined_df()

        a = 0

    def _get_joined_df(self):
        # get index for joined dataframe
        joined_idx = pd.concat(map(pd.Series, [self.ECG.index, self.ACC.index, self.Marker.index, self.HRV.index]))
        joined_idx = pd.Index(joined_idx.drop_duplicates().sort_values())
        col_names = ['ECG', 'Accelerometer_X', 'Accelerometer_Y', 'Accelerometer_Z', 'Accelerometer_mag', 'Marker', 'HRV']
        joined_df = pd.DataFrame(index=joined_idx, columns=col_names)

        joined_df.loc[self.ECG.index, 'ECG'] = self.ECG
        joined_df.loc[self.ACC.index, ['Accelerometer_X', 'Accelerometer_Y', 'Accelerometer_Z', 'Accelerometer_mag']] = self.ACC[['X', 'Y', 'Z', 'mag']]
        joined_df.loc[self.Marker.index, 'Marker'] = self.Marker
        joined_df.loc[self.HRV.index, 'HRV'] = self.HRV

        return joined_df


    def write(self, path):
        writer = edf.EdfWriter(path, len(self.signal_headers), 0)
        writer.setHeader(self.file_header)
        writer.setSignalHeaders(self.signal_headers)

        for i in range(self._n_datarecords):
            ecg_freq = self.sample_freqs['ECG']
            writer.writePhysicalSamples(self.ECG[ecg_freq * i: ecg_freq * (i + 1)])
            
            acc_freq = self.sample_freqs['Accelerometer_X']
            writer.writePhysicalSamples(self.ACC.loc[acc_freq * i: acc_freq * (i + 1), 'X'])
            writer.writePhysicalSamples(self.ACC.loc[acc_freq * i: acc_freq * (i + 1), 'Y'])
            writer.writePhysicalSamples(self.ACC.loc[acc_freq * i: acc_freq * (i + 1), 'Z'])
            
            marker_freq = self.sample_freqs['Marker']
            writer.writePhysicalSamples(self.Marker[marker_freq * i: marker_freq * (i + 1)])

            hrv_freq = self.sample_freqs['HRV']
            writer.writePhysicalSamples(self.HRV[hrv_freq * i: hrv_freq * (i + 1)])

        writer.close()


    def _add_acc_mag(self):
        if all(label in self.data.columns for label in ['Accelerometer_X', 'Accelerometer_Y', 'Accelerometer_Z']):
            self.data['acc_mag'] = np.linalg.norm(self.data[['Accelerometer_X', 'Accelerometer_Y', 'Accelerometer_Z']], axis=1)
            self.sample_freqs['acc_mag'] = self.sample_freqs['Accelerometer_X']

    def timeshift(self, shift='random'):
        """
        Timeshifts the data by shifting all time related values (i.e. start_time and data.index).

        Parameters
        ----------
        shift : None/'random', pd.Timestamp or pd.Timedelta
            If shift is not specified, shifts the data by a random time interval
            between one month and two years to the past.

            If shift is a timdelta, shifts the data by that timedelta.

            If shift is a timestamp, shifts the data such that the earliest entry
            is at that timestamp and the remaining values keep the same time distance to the first entry.
        """
        if shift == 'random':
            one_month = pd.Timedelta('30 days').value
            two_years = pd.Timedelta('730 days').value
            random_timedelta = - pd.Timedelta(random.uniform(one_month, two_years)).round('s')
            self.timeshift(random_timedelta)
        if isinstance(shift, pd.Timestamp):
            self.start_time = shift
            timedeltas = self.data.index - self.data.index.min()
            self.data.index = shift + timedeltas
        if isinstance(shift, pd.Timedelta):
            self.start_time += shift
            self.data.index += shift
